#!/usr/bin/env python3
"""
Script pour cr√©er un utilisateur de test sur Render (Production)
Usage: python create_test_user_production.py
"""

import requests
import json
import sys

# Configuration
PRODUCTION_URL = "https://calmnesstrading.onrender.com"
ADMIN_EMAIL = "admin@calmnessfi.com"
ADMIN_PASSWORD = "calmness"

# Donn√©es de l'utilisateur de test
TEST_USER = {
    "username": "testuser",
    "email": "test@calmnessfi.com",
    "password": "Test123!",
    "first_name": "Jean",
    "last_name": "Dupont",
    "phone": "+33612345678",
    "telegram_username": "@jeandupont"
}

def print_step(step, message):
    """Afficher une √©tape avec formatage"""
    print(f"\n{'='*60}")
    print(f"√âtape {step}: {message}")
    print('='*60)

def main():
    print("\nüöÄ Cr√©ation d'un utilisateur de test sur Render (Production)")
    print(f"URL: {PRODUCTION_URL}")
    
    # √âtape 1: Connexion admin
    print_step(1, "Connexion en tant qu'administrateur")
    
    try:
        login_response = requests.post(
            f"{PRODUCTION_URL}/api/auth/login/",
            json={
                "email": ADMIN_EMAIL,
                "password": ADMIN_PASSWORD
            },
            timeout=30
        )
        
        if login_response.status_code != 200:
            print(f"‚ùå Erreur de connexion admin: {login_response.status_code}")
            print(f"R√©ponse: {login_response.text}")
            sys.exit(1)
        
        token = login_response.json().get('access')
        if not token:
            print("‚ùå Aucun token d'acc√®s re√ßu")
            sys.exit(1)
        
        print("‚úÖ Connexion admin r√©ussie")
        print(f"Token re√ßu: {token[:20]}...")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        sys.exit(1)
    
    # √âtape 2: Cr√©er l'utilisateur
    print_step(2, "Cr√©ation de l'utilisateur de test")
    
    try:
        create_response = requests.post(
            f"{PRODUCTION_URL}/api/auth/register/",
            json=TEST_USER,
            timeout=30
        )
        
        if create_response.status_code == 201:
            user_data = create_response.json()
            print("‚úÖ Utilisateur cr√©√© avec succ√®s")
            print(f"Donn√©es: {json.dumps(user_data, indent=2)}")
            user_id = user_data.get('user', {}).get('id')
        elif create_response.status_code == 400:
            # L'utilisateur existe peut-√™tre d√©j√†
            error_data = create_response.json()
            if 'email' in error_data and 'already exists' in str(error_data['email']).lower():
                print("‚ö†Ô∏è  L'utilisateur existe d√©j√†, r√©cup√©ration de l'ID...")
                
                # R√©cup√©rer la liste des utilisateurs pour trouver l'ID
                users_response = requests.get(
                    f"{PRODUCTION_URL}/api/auth/admin/users/",
                    headers={
                        "Authorization": f"Bearer {token}",
                        "Content-Type": "application/json"
                    },
                    timeout=30
                )
                
                if users_response.status_code == 200:
                    users = users_response.json()
                    target_user = next((u for u in users if u.get('email') == TEST_USER['email']), None)
                    if target_user:
                        user_id = target_user['id']
                        print(f"‚úÖ Utilisateur trouv√© avec ID: {user_id}")
                    else:
                        print("‚ùå Utilisateur non trouv√© dans la liste")
                        sys.exit(1)
                else:
                    print(f"‚ùå Erreur lors de la r√©cup√©ration des utilisateurs: {users_response.text}")
                    sys.exit(1)
            else:
                print(f"‚ùå Erreur de cr√©ation: {create_response.text}")
                sys.exit(1)
        else:
            print(f"‚ùå Erreur de cr√©ation: {create_response.status_code}")
            print(f"R√©ponse: {create_response.text}")
            sys.exit(1)
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        sys.exit(1)
    
    # √âtape 3: Activer l'utilisateur
    print_step(3, "Activation de l'utilisateur")
    
    try:
        activate_response = requests.patch(
            f"{PRODUCTION_URL}/api/auth/admin/users/{user_id}/",
            headers={
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            },
            json={
                "is_active": True,
                "is_verified": True
            },
            timeout=30
        )
        
        if activate_response.status_code == 200:
            print("‚úÖ Utilisateur activ√© avec succ√®s")
            activated_user = activate_response.json()
            print(f"Donn√©es: {json.dumps(activated_user, indent=2)}")
        else:
            print(f"‚ö†Ô∏è  Statut d'activation: {activate_response.status_code}")
            print(f"L'utilisateur peut d√©j√† √™tre activ√©. R√©ponse: {activate_response.text}")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de l'activation: {e}")
        sys.exit(1)
    
    # √âtape 4: V√©rification de la connexion
    print_step(4, "V√©rification de la connexion")
    
    try:
        test_login_response = requests.post(
            f"{PRODUCTION_URL}/api/auth/login/",
            json={
                "email": TEST_USER['email'],
                "password": TEST_USER['password']
            },
            timeout=30
        )
        
        if test_login_response.status_code == 200:
            print("‚úÖ Connexion de test r√©ussie")
            test_data = test_login_response.json()
            print(f"Token utilisateur re√ßu: {test_data.get('access', '')[:20]}...")
        else:
            print(f"‚ö†Ô∏è  √âchec de la connexion de test: {test_login_response.status_code}")
            print(f"R√©ponse: {test_login_response.text}")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
    
    # R√©sum√© final
    print("\n" + "="*60)
    print("üéâ CR√âATION TERMIN√âE")
    print("="*60)
    print(f"\nüìß Email: {TEST_USER['email']}")
    print(f"üîë Mot de passe: {TEST_USER['password']}")
    print(f"üë§ Nom: {TEST_USER['first_name']} {TEST_USER['last_name']}")
    print(f"üì± T√©l√©phone: {TEST_USER['phone']}")
    print(f"üí¨ Telegram: {TEST_USER['telegram_username']}")
    print(f"\nüåê URL de connexion: https://calmnesstrading.vercel.app")
    print("\n‚úÖ Vous pouvez maintenant vous connecter avec ces identifiants!")

if __name__ == "__main__":
    main()

