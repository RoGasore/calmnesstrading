#!/bin/bash

echo "========================================="
echo "  CALMNESS TRADING - D√©marrage Complet  "
echo "========================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# V√©rifier les variables d'environnement essentielles
echo -e "${YELLOW}üìã V√©rification de la configuration...${NC}"

if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
    echo -e "${RED}‚ùå TELEGRAM_BOT_TOKEN non d√©fini${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Le bot Telegram ne pourra pas d√©marrer${NC}"
fi

if [ -z "$UPSTASH_REDIS_REST_URL" ]; then
    echo -e "${RED}‚ùå UPSTASH_REDIS_REST_URL non d√©fini${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Celery ne pourra pas d√©marrer${NC}"
fi

echo -e "${GREEN}‚úÖ Configuration v√©rifi√©e${NC}"
echo ""

# Installation des d√©pendances
echo -e "${BLUE}üì¶ Installation des d√©pendances...${NC}"
pip install -r requirements.txt
pip install -r requirements_telegram.txt 2>/dev/null || echo "‚ö†Ô∏è  requirements_telegram.txt non trouv√©"
echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
echo ""

# Appliquer les migrations
echo -e "${BLUE}üóÑÔ∏è  Application des migrations...${NC}"
python manage.py migrate --noinput
echo -e "${GREEN}‚úÖ Migrations appliqu√©es${NC}"
echo ""

# Cr√©er les utilisateurs essentiels
echo -e "${BLUE}üë§ Cr√©ation des utilisateurs syst√®me...${NC}"
python manage.py sync_admin_user
python manage.py create_customer_service
python manage.py create_test_user
echo -e "${GREEN}‚úÖ Utilisateurs cr√©√©s${NC}"
echo ""

# Cr√©er l'offre de test 10 minutes
echo -e "${BLUE}üéØ Cr√©ation de l'offre de test 10 minutes...${NC}"
python manage.py create_test_offer_10min
echo -e "${GREEN}‚úÖ Offre de test cr√©√©e${NC}"
echo ""

# Fonction pour arr√™ter proprement les processus
cleanup() {
    echo -e "\n${YELLOW}üõë Arr√™t de tous les services...${NC}"
    kill $DJANGO_PID $CELERY_WORKER_PID $CELERY_BEAT_PID $BOT_PID 2>/dev/null
    echo -e "${GREEN}‚úÖ Tous les services arr√™t√©s${NC}"
    exit 0
}

trap cleanup SIGINT SIGTERM

echo ""
echo -e "${GREEN}=========================================${NC}"
echo -e "${GREEN}  Lancement des Services                ${NC}"
echo -e "${GREEN}=========================================${NC}"
echo ""

# 1. D√©marrer Django
echo -e "${BLUE}[1/4] üåê D√©marrage de Django...${NC}"
python manage.py runserver 0.0.0.0:8000 > logs/django.log 2>&1 &
DJANGO_PID=$!
echo -e "${GREEN}‚úÖ Django d√©marr√© (PID: $DJANGO_PID)${NC}"
echo -e "   üìç URL: http://localhost:8000"
sleep 3

# 2. D√©marrer Celery Worker
echo -e "${BLUE}[2/4] üîß D√©marrage de Celery Worker...${NC}"
celery -A backend worker -l info --concurrency=2 > logs/celery_worker.log 2>&1 &
CELERY_WORKER_PID=$!
echo -e "${GREEN}‚úÖ Celery Worker d√©marr√© (PID: $CELERY_WORKER_PID)${NC}"
sleep 3

# 3. D√©marrer Celery Beat
echo -e "${BLUE}[3/4] ‚è∞ D√©marrage de Celery Beat (Scheduler)...${NC}"
celery -A backend beat -l info > logs/celery_beat.log 2>&1 &
CELERY_BEAT_PID=$!
echo -e "${GREEN}‚úÖ Celery Beat d√©marr√© (PID: $CELERY_BEAT_PID)${NC}"
sleep 3

# 4. D√©marrer le Bot Telegram
if [ -n "$TELEGRAM_BOT_TOKEN" ]; then
    echo -e "${BLUE}[4/4] ü§ñ D√©marrage du Bot Telegram...${NC}"
    python telegram_bot/bot.py > logs/telegram_bot.log 2>&1 &
    BOT_PID=$!
    echo -e "${GREEN}‚úÖ Bot Telegram d√©marr√© (PID: $BOT_PID)${NC}"
    echo -e "   üìç Bot: @$TELEGRAM_BOT_USERNAME"
else
    echo -e "${YELLOW}[4/4] ‚ö†Ô∏è  Bot Telegram non d√©marr√© (TELEGRAM_BOT_TOKEN manquant)${NC}"
    BOT_PID=""
fi

echo ""
echo -e "${GREEN}=========================================${NC}"
echo -e "${GREEN}  üéâ TOUS LES SERVICES SONT D√âMARR√âS ! ${NC}"
echo -e "${GREEN}=========================================${NC}"
echo ""
echo -e "${YELLOW}üìä Services actifs:${NC}"
echo -e "   üåê Django API       : PID $DJANGO_PID ‚Üí http://localhost:8000"
echo -e "   üîß Celery Worker    : PID $CELERY_WORKER_PID"
echo -e "   ‚è∞ Celery Beat      : PID $CELERY_BEAT_PID"
if [ -n "$BOT_PID" ]; then
    echo -e "   ü§ñ Telegram Bot     : PID $BOT_PID ‚Üí @$TELEGRAM_BOT_USERNAME"
fi
echo ""
echo -e "${YELLOW}üìù Logs disponibles:${NC}"
echo -e "   tail -f logs/django.log"
echo -e "   tail -f logs/celery_worker.log"
echo -e "   tail -f logs/celery_beat.log"
if [ -n "$BOT_PID" ]; then
    echo -e "   tail -f logs/telegram_bot.log"
fi
echo ""
echo -e "${GREEN}üß™ OFFRE DE TEST CR√â√âE:${NC}"
echo -e "   Nom: Signal Demo 10min"
echo -e "   Prix: 1‚Ç¨"
echo -e "   Dur√©e: 10 minutes"
echo -e "   R√©vocation: Automatique apr√®s 10 min"
echo ""
echo -e "${GREEN}üöÄ PR√äT POUR LE TEST:${NC}"
echo -e "   1. Admin: Cr√©er l'offre si pas d√©j√† fait"
echo -e "   2. User: Acheter l'offre"
echo -e "   3. Service Client: Valider le paiement"
echo -e "   4. User: Cliquer sur le lien bot"
echo -e "   5. User: Rejoindre le canal"
echo -e "   6. Attendre 10 minutes ‚Üí R√©vocation auto"
echo ""
echo -e "${YELLOW}üí° Appuyez sur Ctrl+C pour arr√™ter tous les services${NC}"
echo ""

# Attendre que les processus se terminent
wait

