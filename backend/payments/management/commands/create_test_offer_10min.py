from django.core.management.base import BaseCommand
from payments.models import Offer

class Command(BaseCommand):
    help = 'Cr√©er une offre de test 10 minutes pour d√©monstration compl√®te du syst√®me Telegram'

    def handle(self, *args, **options):
        self.stdout.write('üß™ Cr√©ation offre de test 10 minutes...')
        
        # Cr√©er ou mettre √† jour l'offre de test
        offer, created = Offer.objects.update_or_create(
            name="Signal Demo 10min",
            defaults={
                'description': 'Abonnement de d√©monstration 10 minutes - Acc√®s aux signaux de trading premium pour tester le syst√®me complet (r√©vocation automatique apr√®s 10 minutes)',
                'offer_type': 'signal',
                'price': 1.00,  # 1‚Ç¨ pour test
                'currency': 'EUR',
                'duration_minutes': 10,  # 10 minutes d'acc√®s
                'is_active': True,
                'color_theme': 'gold',
                'metadata': {
                    'is_test': True,
                    'auto_revoke': True,
                    'test_duration': '10 minutes',
                    'description_details': 'Offre de d√©monstration pour validation du workflow complet : paiement ‚Üí validation ‚Üí bot Telegram ‚Üí acc√®s canal ‚Üí r√©vocation automatique'
                }
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('‚úÖ Offre de test cr√©√©e !'))
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ Offre de test mise √† jour !'))
        
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üìã D√©tails de l\'offre:'))
        self.stdout.write(f'   ID              : {offer.id}')
        self.stdout.write(f'   Nom             : {offer.name}')
        self.stdout.write(f'   Description     : {offer.description[:80]}...')
        self.stdout.write(f'   Prix            : {offer.price} {offer.currency}')
        self.stdout.write(f'   Type            : {offer.get_offer_type_display()}')
        self.stdout.write(f'   Dur√©e           : {offer.duration_minutes} minutes')
        self.stdout.write(f'   Statut          : {"Actif ‚úÖ" if offer.is_active else "Inactif ‚ùå"}')
        self.stdout.write('')
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  ATTENTION - D√âMONSTRATION:'))
        self.stdout.write('   Cette offre donne acc√®s au canal Telegram pour 10 minutes SEULEMENT.')
        self.stdout.write('   L\'acc√®s sera r√©voqu√© automatiquement apr√®s 10 minutes.')
        self.stdout.write('   Parfait pour d√©montrer tout le workflow !')
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üéØ Sc√©nario de test complet:'))
        self.stdout.write('')
        self.stdout.write('   üì± UTILISATEUR:')
        self.stdout.write('   1. Se connecter sur le site')
        self.stdout.write('   2. Aller dans Services ‚Üí Signaux')
        self.stdout.write(f'   3. S√©lectionner "{offer.name}"')
        self.stdout.write('   4. Remplir le formulaire avec son @username Telegram')
        self.stdout.write('   5. Soumettre un ID de transaction (ex: DEMO-001)')
        self.stdout.write('   6. Message: "Merci ! En attente de v√©rification..."')
        self.stdout.write('')
        self.stdout.write('   üõü SERVICE CLIENT:')
        self.stdout.write('   7. Se connecter sur /support')
        self.stdout.write('   8. Aller dans Paiements')
        self.stdout.write('   9. Cliquer sur "V√©rifier & Valider"')
        self.stdout.write('   10. Confirmer la validation')
        self.stdout.write('')
        self.stdout.write('   ü§ñ AUTOMATIQUE:')
        self.stdout.write('   11. Token Telegram g√©n√©r√© automatiquement')
        self.stdout.write('   12. Notification cr√©√©e avec lien bot')
        self.stdout.write('')
        self.stdout.write('   üë§ UTILISATEUR (suite):')
        self.stdout.write('   13. Voir la notification "Paiement valid√© !"')
        self.stdout.write('   14. Cliquer sur le lien du bot Telegram')
        self.stdout.write('   15. /start TOKEN dans le bot')
        self.stdout.write('   16. Recevoir lien invitation unique (expire 5min)')
        self.stdout.write('   17. Rejoindre le canal priv√©')
        self.stdout.write('   18. Voir les signaux pendant 10 minutes ‚úÖ')
        self.stdout.write('')
        self.stdout.write('   ‚è∞ APR√àS 10 MINUTES:')
        self.stdout.write('   19. Celery d√©tecte expiration (v√©rif chaque minute)')
        self.stdout.write('   20. User banni automatiquement du canal')
        self.stdout.write('   21. Notification "Abonnement expir√©"')
        self.stdout.write('   22. User ne voit plus le canal ‚ùå')
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('‚úÖ R√âSULTAT:'))
        self.stdout.write('   Workflow complet valid√© en 10 minutes !')
        self.stdout.write('   R√©vocation automatique pr√©cise √† la minute')
        self.stdout.write('   Syst√®me pr√™t pour production')

