from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from payments.models import Subscription
from accounts.models import UserNotification


class Command(BaseCommand):
    help = 'Cr√©er les notifications automatiques pour les abonnements qui expirent'

    def handle(self, *args, **options):
        """
        Cr√©e des notifications pour les abonnements:
        - 7 jours avant expiration
        - 3 jours avant
        - 2 jours avant
        - 1 jour avant
        - 1 jour apr√®s
        - 2 jours apr√®s
        - 3 jours apr√®s
        """
        now = timezone.now()
        
        # D√©lais de notification
        notification_timings = [
            (-7, 'warning_7_days', 'Renouvellement recommand√©', 
             'Votre abonnement √† {service} expire dans 7 jours. Pensez √† le renouveler pour continuer √† profiter de nos services ! üîÑ'),
            
            (-3, 'warning_3_days', 'Expiration dans 3 jours', 
             'Plus que 3 jours avant l\'expiration de votre abonnement {service}. N\'oubliez pas de renouveler ! ‚ö†Ô∏è'),
            
            (-2, 'warning_2_days', 'Expiration dans 2 jours', 
             'Attention ! Votre abonnement {service} expire dans 2 jours. Renouvelez d√®s maintenant pour ne pas perdre l\'acc√®s. ‚è∞'),
            
            (-1, 'warning_1_day', 'Derni√®re chance !', 
             'Dernier jour ! Votre abonnement {service} expire demain. Renouvelez maintenant pour continuer sans interruption ! üö®'),
            
            (1, 'expired_1_day', 'Abonnement expir√©', 
             'Votre abonnement {service} a expir√© hier. Renouvelez-le pour retrouver l\'acc√®s √† nos services premium. üíî'),
            
            (2, 'expired_2_days', 'On vous attend !', 
             'Cela fait 2 jours que votre abonnement {service} a expir√©. Nous serions ravis de vous revoir ! Renouvelez maintenant. üéØ'),
            
            (3, 'expired_3_days', 'Derni√®re notification', 
             'Derni√®re relance : Votre abonnement {service} a expir√© il y a 3 jours. Rejoignez-nous √† nouveau ! C\'est votre derni√®re notification. üëã'),
        ]
        
        notifications_created = 0
        
        # R√©cup√©rer tous les abonnements actifs
        active_subscriptions = Subscription.objects.filter(
            status='active'
        ).select_related('user', 'offer')
        
        for subscription in active_subscriptions:
            for days_offset, notif_key, title_template, message_template in notification_timings:
                # Calculer la date cible
                if days_offset < 0:  # Avant expiration
                    target_date = subscription.end_date + timedelta(days=days_offset)
                else:  # Apr√®s expiration
                    target_date = subscription.end_date + timedelta(days=days_offset)
                
                # V√©rifier si on doit cr√©er la notification
                # (le jour m√™me de la date cible)
                if target_date.date() == now.date():
                    # V√©rifier qu'elle n'existe pas d√©j√†
                    existing = UserNotification.objects.filter(
                        user=subscription.user,
                        subscription=subscription,
                        notification_type='subscription_expiring' if days_offset < 0 else 'subscription_expired',
                        title=title_template
                    ).exists()
                    
                    if not existing:
                        # Cr√©er la notification
                        service_name = subscription.offer.name
                        
                        notification = UserNotification.objects.create(
                            user=subscription.user,
                            subscription=subscription,
                            notification_type='subscription_expiring' if days_offset < 0 else 'subscription_expired',
                            title=title_template,
                            message=message_template.format(service=service_name),
                            status='sent',  # Envoy√©e imm√©diatement
                            sent_at=now,
                        )
                        
                        notifications_created += 1
                        
                        self.stdout.write(
                            self.style.SUCCESS(
                                f'‚úÖ Notification cr√©√©e pour {subscription.user.email} - {title_template}'
                            )
                        )
        
        # Marquer les abonnements expir√©s
        expired_count = Subscription.objects.filter(
            status='active',
            end_date__lt=now
        ).update(status='expired')
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\nüìä R√©sum√©:\n'
                f'   - {notifications_created} notifications cr√©√©es\n'
                f'   - {expired_count} abonnements marqu√©s comme expir√©s'
            )
        )

