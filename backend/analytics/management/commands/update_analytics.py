"""
Commande Django pour mettre √† jour toutes les analytics
Usage: python manage.py update_analytics
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import date, timedelta
from analytics.models import TradingPerformance, AnalyticsSummary
from django.contrib.auth import get_user_model

User = get_user_model()


class Command(BaseCommand):
    help = 'Met √† jour toutes les m√©triques analytics (trading performances, rankings, r√©sum√©s quotidiens)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--date',
            type=str,
            help='Date sp√©cifique pour g√©n√©rer le r√©sum√© (YYYY-MM-DD)',
        )
        parser.add_argument(
            '--days',
            type=int,
            default=7,
            help='Nombre de jours en arri√®re pour g√©n√©rer les r√©sum√©s (d√©faut: 7)',
        )
        parser.add_argument(
            '--performances-only',
            action='store_true',
            help='Mettre √† jour uniquement les performances trading',
        )
        parser.add_argument(
            '--summaries-only',
            action='store_true',
            help='G√©n√©rer uniquement les r√©sum√©s quotidiens',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ D√©marrage mise √† jour Analytics...'))
        
        if not options['summaries_only']:
            self.update_trading_performances()
        
        if not options['performances_only']:
            self.generate_summaries(options)
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Mise √† jour Analytics termin√©e !'))

    def update_trading_performances(self):
        """Met √† jour les performances de trading de tous les utilisateurs"""
        self.stdout.write('üìä Mise √† jour des performances trading...')
        
        users = User.objects.filter(is_active=True)
        updated_count = 0
        
        for user in users:
            try:
                perf, created = TradingPerformance.objects.get_or_create(user=user)
                
                # Recalculer les m√©triques
                perf.calculate_all_metrics()
                updated_count += 1
                
                if created:
                    self.stdout.write(f'  ‚úì Cr√©√© performance pour {user.email}')
                else:
                    self.stdout.write(f'  ‚Üª Mis √† jour {user.email}')
                    
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'  ‚úó Erreur {user.email}: {e}')
                )
        
        # Mettre √† jour le classement global
        self.stdout.write('üèÜ Mise √† jour du classement global...')
        TradingPerformance.update_global_rankings()
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ {updated_count} performances mises √† jour')
        )

    def generate_summaries(self, options):
        """G√©n√®re les r√©sum√©s quotidiens"""
        self.stdout.write('üìÖ G√©n√©ration des r√©sum√©s quotidiens...')
        
        if options['date']:
            # Date sp√©cifique
            target_date = date.fromisoformat(options['date'])
            dates = [target_date]
        else:
            # Plusieurs jours en arri√®re
            days = options['days']
            today = date.today()
            dates = [today - timedelta(days=i) for i in range(days)]
        
        generated_count = 0
        
        for target_date in dates:
            try:
                summary = AnalyticsSummary.generate_for_date(target_date)
                generated_count += 1
                self.stdout.write(f'  ‚úì R√©sum√© g√©n√©r√© pour {target_date}')
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'  ‚úó Erreur {target_date}: {e}')
                )
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ {generated_count} r√©sum√©s g√©n√©r√©s')
        )
